<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeHarmony 代码和声</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-25T06:05:28.158Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>代码和声</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Dev-Journal] 02</title>
    <link href="http://example.com/2024/05/25/Dev-Journal-2/"/>
    <id>http://example.com/2024/05/25/Dev-Journal-2/</id>
    <published>2024-05-25T05:59:30.000Z</published>
    <updated>2024-05-25T06:05:28.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：主要完成了一些基础设施的搭建</p></blockquote><h1 id="1、通信模块搭建"><a href="#1、通信模块搭建" class="headerlink" title="1、通信模块搭建"></a>1、通信模块搭建</h1><p>由于工程涉及两个不同环境的通信，故需封装通信管道，以便于后期开发。</p><p>参考<a href="https://juejin.cn/post/7063827166345052197?searchId=2024041918394128EBD19DFF83C292013B">https://juejin.cn/post/7063827166345052197?searchId=2024041918394128EBD19DFF83C292013B</a></p><p>采用通信方案：使用 QWebchannel 进行双向通信。每个请求都有唯一的 id ，便于后端发送响应，以实现短通信。由于项目实现逻辑较为简单，故没有实现长通信，后期将采用轮询以替代。</p><h2 id="1-1-后端通信模块"><a href="#1-1-后端通信模块" class="headerlink" title="1.1 后端通信模块"></a>1.1 后端通信模块</h2><p>[2024&#x2F;4&#x2F;18]</p><p>使用 QWebchannel 需要声明一个继承自 QObject 的类，类中需要编写<strong>提供给 web 调用的</strong> slot，以及<strong>向 web 发射的</strong> signal ，同时也写了一个 signal 便于消息分发。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/channel.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Channel</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Channel</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> Channel *<span class="title">Instance</span><span class="params">()</span></span>; <span class="comment">// singleton</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Channel *_instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">/* method for web */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">receive</span><span class="params">(<span class="type">const</span> QString &amp;id, <span class="type">const</span> QString &amp;action, <span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">/* signal for back to connect */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onFrontMessage</span><span class="params">(<span class="type">const</span> QString &amp;id, <span class="type">const</span> QString &amp;action, <span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* signal for web to connect */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onBackMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后配置子目录</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /src/common/CMakeLists.txt</span></span><br><span class="line"><span class="keyword">project</span>(common)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ common)</span><br><span class="line"><span class="keyword">add_library</span>(common <span class="variable">$&#123;common&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(common PRIVATE Qt6::Core)</span><br><span class="line"><span class="keyword">target_include_directories</span>(common PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(./src/core)</span><br><span class="line"><span class="keyword">target_include_directories</span>(core PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC common)</span><br></pre></td></tr></table></figure><p>接着我参考<a href="https://zhuanlan.zhihu.com/p/268462046%EF%BC%8C%E5%86%99%E4%BA%86%E4%B8%80%E5%A5%97%E5%9F%BA%E7%B1%BB%E4%BE%BF%E4%BA%8E%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%91%E5%A4%84%E7%90%86%E3%80%82%E7%94%B1%E4%BA%8E">https://zhuanlan.zhihu.com/p/268462046，写了一套基类便于实现消息分发处理。由于</a> c++ 并没有提供反射机制，所以另辟蹊径，利用类静态成员会在编译时完成初始化的特性，将消息与工厂函数注册在工厂类中。然后提供宏以实现注册分发器以及 action，运行时就能够根据 web 端传入的 action 实现自动实例化相应的处理器对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/common/ipc.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册action：向指定的分发器，注册对应 action 的处理器</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REG_ACTION(action,handler,dispatcher)\</span></span><br><span class="line"><span class="meta">    inline static bool reg = dispatcher::_register<span class="string">&lt;handler&gt;</span>(action);</span></span><br><span class="line"><span class="comment">// 注册分发器：在子类中初始化静态映射表，并重写 _get_map 函数方便基类获取映射表，并提供 _register 函数用于注册 action</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REG_DISPATCHER(dispatcher)\</span></span><br><span class="line"><span class="meta">    private:\</span></span><br><span class="line"><span class="meta">    using HandlerFactoryMethod = BaseHandler *(*)();\</span></span><br><span class="line"><span class="meta">    inline static auto *_handlers = new std::map<span class="string">&lt;std::string, HandlerFactoryMethod&gt;</span>();\</span></span><br><span class="line"><span class="meta">    virtual std::map<span class="string">&lt;std::string, HandlerFactoryMethod&gt;</span> *_getMap() &#123; return dispatcher::_handlers; &#125; \</span></span><br><span class="line"><span class="meta">    public:\</span></span><br><span class="line"><span class="meta">    template <span class="string">&lt;typename T&gt;</span>\</span></span><br><span class="line"><span class="meta">    static bool _register(const std::string &amp;action)\</span></span><br><span class="line"><span class="meta">    &#123;\</span></span><br><span class="line"><span class="meta">        try\</span></span><br><span class="line"><span class="meta">        &#123;\</span></span><br><span class="line"><span class="meta">            (*dispatcher::_handlers)[action] = []() -&gt; BaseHandler *\</span></span><br><span class="line"><span class="meta">            &#123;\ <span class="comment">// 此为对应处理器的工厂方法</span></span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>();\</span><br><span class="line">            &#125;;\</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;\</span><br><span class="line">        &#125;\</span><br><span class="line">        <span class="built_in">catch</span> (...)\</span><br><span class="line">        &#123;\</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;\</span><br><span class="line">        &#125;\</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 消息分发器，提供 receive 槽函数以及 send 信号。</span></span><br><span class="line"><span class="comment">*  receive 槽函数为向外部暴露的处理接口</span></span><br><span class="line"><span class="comment">*  send 信号为向外部暴露的响应接口</span></span><br><span class="line"><span class="comment">*  handle 函数定义了根据 action 获取对应的 handler 、执行并返回 Response 的默认行为·</span></span><br><span class="line"><span class="comment">*  process 函数为子类提供重写接口，方便在需要自定义处理逻辑的时候进行重写，默认为调用 handle 并返回Response</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseDispatcher</span>: <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">BaseDispatcher</span>() = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">receive</span><span class="params">(<span class="type">const</span> QString &amp;id, <span class="type">const</span> QString &amp;action, <span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">(<span class="type">const</span> QJsonObject &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Handle a action, and return the response for emit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BaseResponse *<span class="title">process</span><span class="params">(<span class="type">const</span> QString &amp;id, <span class="type">const</span> QString &amp;action, <span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Choose a handler for message according its action.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseResponse *<span class="title">handle</span><span class="params">(<span class="type">const</span> std::string &amp;action, <span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> HandlerFactoryMethod = BaseHandler *(*)();</span><br><span class="line">    <span class="keyword">virtual</span> std::map&lt;std::string, HandlerFactoryMethod&gt; *_getMap() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息处理器，开发时继承此基类然后使用 REG_Action 宏注册消息，并实现 execute 函数，即可完成消息分发</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseHandler</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">BaseHandler</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BaseResponse *<span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addData</span><span class="params">(<span class="type">const</span> QJsonObject &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QJsonObject _data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，还实现了 BaseResponse 基类以及 BaseData 基类，便于后期使用。</p><h2 id="1-2-前端通信模块"><a href="#1-2-前端通信模块" class="headerlink" title="1.2 前端通信模块"></a>1.2 前端通信模块</h2><p>[2024&#x2F;4&#x2F;22]</p><p>前端部分需要引入 qwebchannel.js 并进行封装。为了适配现代前端的开发方式，我参考开头的文章，对外封装了异步函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/store/useChannel.ts</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">channel</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">status</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">promiseMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, promiseInfo&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">initPromise</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 异步执行初始化逻辑，初始化完毕后将 initPromise 设为 fulfilled 状态</span></span><br><span class="line">        <span class="comment">//@ts-ignore</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">initPromise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//@ts-ignore</span></span><br><span class="line">            <span class="keyword">if</span> (qt != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params">channel: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">channel</span> = channel.<span class="property">objects</span>.<span class="property">channel</span>;</span><br><span class="line">                    <span class="comment">// link back signal to front</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">channel</span>.<span class="property">onBackMessage</span>.<span class="title function_">connect</span>(<span class="variable language_">this</span>.<span class="property">fromBack</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;Engine&quot;</span>;</span><br><span class="line">                <span class="comment">//@ts-ignore</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">QWebChannel</span>(qt.<span class="property">webChannelTransport</span>, init.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;Web&quot;</span>;</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部接口，接受后端信息并处理对外提供的 Promise</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">fromBack</span>(<span class="params">Response: IResponse.IBaseResponse&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> info = <span class="variable language_">this</span>.<span class="property">promiseMap</span>.<span class="title function_">get</span>(<span class="title class_">Response</span>.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (info) &#123;</span><br><span class="line">            info.<span class="title function_">resolve</span>(<span class="title class_">Response</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">promiseMap</span>.<span class="title function_">delete</span>(<span class="title class_">Response</span>.<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部接口，等待初始化完毕后向后端发送消息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">async</span> <span class="title function_">sendBack</span>(<span class="params">id: <span class="built_in">string</span>, action: <span class="built_in">string</span>, data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// wait until initialization completed</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">initPromise</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">channel</span>.<span class="title function_">receive</span>(id, action, data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外接口，返回带有响应数据的 Promise</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">send</span>(<span class="attr">action</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="built_in">any</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">IResponse</span>.<span class="property">IBaseResponse</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Id</span> = <span class="title function_">uuidv4</span>();</span><br><span class="line">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="title class_">IResponse</span>.<span class="property">IBaseResponse</span>&lt;<span class="built_in">any</span>&gt;&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">promiseMap</span>.<span class="title function_">set</span>(<span class="title class_">Id</span>, &#123; resolve, reject &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendBack</span>(<span class="title class_">Id</span>, action, data);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将对外接口通过 pinia 封装入 useChannel 中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/store/useChannel.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useChannel = <span class="title function_">defineStore</span>(<span class="string">&quot;channel&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">Channel</span>();</span><br><span class="line">    <span class="keyword">const</span> status = channel.<span class="property">status</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">send</span> = (<span class="params">action: <span class="built_in">string</span>, data: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> channel.<span class="title function_">send</span>(action, data);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isEngine</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> channel.<span class="property">status</span> == <span class="string">&quot;Engine&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; status,send,isEngine&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="1-3-测试用例"><a href="#1-3-测试用例" class="headerlink" title="1.3 测试用例"></a>1.3 测试用例</h2><p>后端开发时，只需继承 ipc 中的类便可实现便捷的消息分发，有利于将注意力更好地集中在业务逻辑上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> : <span class="keyword">public</span> BaseDispatcher</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Q_OBJECT</span></span><br><span class="line"><span class="function">    <span class="title">REG_DISPATCHER</span><span class="params">(Test)</span></span></span><br><span class="line"><span class="function">&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestHandler</span> : <span class="keyword">public</span> BaseHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">REG_ACTION</span>(<span class="string">&quot;test&quot;</span>, TestHandler, Test)</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BaseResponse *<span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        QJsonObject *value = <span class="keyword">new</span> <span class="built_in">QJsonObject</span>();</span><br><span class="line">        (*value)[<span class="string">&quot;test&quot;</span>] = <span class="string">&quot;good!!!!&quot;</span>;</span><br><span class="line">        BaseResponse *res = <span class="keyword">new</span> <span class="built_in">BaseResponse</span>();</span><br><span class="line">        res-&gt;data = value;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mian.cpp</span></span><br><span class="line"><span class="comment">// 后期应该会写一个 BackApp 类来封装初始化逻辑</span></span><br><span class="line">Test *t = <span class="keyword">new</span> <span class="built_in">Test</span>();</span><br><span class="line">QObject::<span class="built_in">connect</span>(Channel::<span class="built_in">Instance</span>(), &amp;Channel::onFrontMessage, t, &amp;Test::receive);</span><br><span class="line">QObject::<span class="built_in">connect</span>(t, &amp;Test::send, Channel::<span class="built_in">Instance</span>(), &amp;Channel::onBackMessage);</span><br></pre></td></tr></table></figure><p>前端测试用例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; resp &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; useChannel &#125; from &quot;@/store&quot;;</span><br><span class="line">import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let channel = useChannel();</span><br><span class="line">let resp: any = reactive(&#123;&#125;);</span><br><span class="line">channel.send(&quot;test&quot;, &#123;&#125;).then(res =&gt; &#123;</span><br><span class="line">    resp.value = res;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240422131400545.png" alt="image-20240422131400545"></p><p>如此一来，我们就拥有了一套通信脚手架。前端只需调用 send 来实现异步请求，后端只需继承 ipc 并实现响应、实现初始化逻辑，就可以便捷地在 C&#x2F;S 架构中开发服务。</p><p>这玩意折腾了一个星期啊。。不得不说 c++ 要实现自动注册还是比较困难的(小声)(小声)(小声)</p><h1 id="2、后端程序初始化"><a href="#2、后端程序初始化" class="headerlink" title="2、后端程序初始化"></a>2、后端程序初始化</h1><p>由于想把初始化逻辑从 mian 函数中解耦，于是简单封装了 BackApp 类，封装了基础的窗口初始化，以及一些服务，然后再把服务初始化逻辑解耦，便于各个服务考虑各自的初始化逻辑，包括对象实例化以及信号与槽的连接，也方便之后在多线程环境中使用服务（也许）。使用时需要继承 ServiceInitializer、重写 init() 函数并在 App 中注册。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BackApp</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BackApp</span>();</span><br><span class="line">    ~<span class="built_in">BackApp</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;ServiceInitializer *&gt; *_services;</span><br><span class="line">    QWebEngineView *webView;</span><br><span class="line">    QWebChannel *channel;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initWindow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initServices</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceInitializer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘要：主要完成了一些基础设施的搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1、通信模块搭建&quot;&gt;&lt;a href=&quot;#1、通信模块搭建&quot; class=&quot;headerlink&quot; title=&quot;1、通信模块搭建&quot;&gt;&lt;/a&gt;1、通信模块搭建&lt;/</summary>
      
    
    
    
    
    <category term="Dev-Journal" scheme="http://example.com/tags/Dev-Journal/"/>
    
  </entry>
  
  <entry>
    <title>[Dev-Journal] 01</title>
    <link href="http://example.com/2024/05/24/Dev-Journal-1/"/>
    <id>http://example.com/2024/05/24/Dev-Journal-1/</id>
    <published>2024-05-24T14:48:32.000Z</published>
    <updated>2024-05-25T06:05:22.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0、项目背景介绍"><a href="#0、项目背景介绍" class="headerlink" title="0、项目背景介绍"></a>0、项目背景介绍</h1><p>学校的 c++ 课程要求在期末前完成一个大作业，需求大致是以综艺节目《最强大脑》第11季第三期中的“植此青绿”为基础玩法制作一个游戏。</p><p>由于直接使用 C++ 框架开发现代GUI难度比较大（其实就是想把游戏做得好看一些 &#x3D; &#x3D; ），又考虑到本程序对性能需求不大，故使用Qt框架下的QWebEngine控件，使用Vue编写界面，使用C++编写项目核心部分，采取前后端分离开发模式，使用QWebChannel进行前后端通信；由于程序的开发涉及Web全栈技术，故使用Visual Studio Code作为编辑器，进行开发与测试。</p><h1 id="1、Qt-CMake环境搭建"><a href="#1、Qt-CMake环境搭建" class="headerlink" title="1、Qt + CMake环境搭建"></a>1、Qt + CMake环境搭建</h1><p>[2024&#x2F;4&#x2F;4] 清明节蹲宿舍敲代码(((</p><p>把 Qt 的环境搭起来是一件非常令人头秃的一件事情，更何况我用的还是 VSCode。而且更头疼的事情是，由于开发过程中要用 QWebengine，这个东西不支持 MinGW，必须得用 MSVC 进行编译，这让我这种 g++ 忠实用户非常的窒息。我曾天真的以为我不需要使用VS这种肥胖的东西，但是我还是太天真了。。。</p><p>言归正传，Qt+CMake 环境的搭建包括 <strong>Qt 的安装</strong>、<strong>CMake 的安装</strong>、<strong>MSVC 的安装</strong>、<strong>Qt 开发套件配置</strong> 四步。</p><h2 id="1-1-安装Qt"><a href="#1-1-安装Qt" class="headerlink" title="1.1 安装Qt"></a>1.1 安装Qt</h2><p>首先去下个 Qt 的安装包(真大啊。。)</p><p>注：后期开发过程中发现 Qt 版本过低，换到了 6.7 </p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240404233602284-1712249671499-15.png" alt="Qt安装包"></p><p>注册并登陆、选择安装路径后，选择需要的配置。对于编译器的选择，最简单的当然还是MinGW编译器，但是本冤种由于需要 QWebengine，所以必须选择 MSVC 编译器。然后再选上其他的控件。</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240404234432185-1712249666991-12.png" alt="image-20240404234432185"></p><h2 id="1-2-CMake安装"><a href="#1-2-CMake安装" class="headerlink" title="1.2 CMake安装"></a>1.2 CMake安装</h2><p>由于本来就装着CMake，这部分不多赘述，只需网上下载安装包，安装并配置环境变量即可。</p><h2 id="1-3-MSVC安装"><a href="#1-3-MSVC安装" class="headerlink" title="1.3 MSVC安装"></a>1.3 MSVC安装</h2><p>这部分烧了不少脑细胞。由于不想把 VS 装电脑里，所以我选择只安装 MSVC 编译器，但由于后期这种配置会造成CMake 报错，所以需要多装一点东西。<a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">下载VS生成工具</a></p><p>经过长时间的查找，最终发现需要下载整套工具。</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240404235045401-1712249658681-9.png" alt="image-20240404235045401"></p><p>下载后需要启动安装目录&#x2F;Tools&#x2F;VsDevCmd.bat以配置环境变量。</p><h2 id="1-4-配置编译套件"><a href="#1-4-配置编译套件" class="headerlink" title="1.4 配置编译套件"></a>1.4 配置编译套件</h2><p>在安装好的Qt目录下，找到 &#x2F;Tools&#x2F;QtCreator&#x2F;bin&#x2F;qtcreator.exe，我们就成功启动Qt给我们提供的IDE拉！</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240404235608969.png" alt="image-20240404235608969"></p><p>找到工具-&gt;选项-&gt; Kits，理想情况下，Qt 会自动检测出编译套件，而且没有警告。如果没有检测出来，就需要手动配置编译器，调试器以及 CMake 的路径。</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405002640513-1712249650530-6.png" alt="image-20240405002640513"></p><p>这里有个坑，可能会显示VC的ABI与当前Qt的ABI不一致，这时需要点击右上方的编译器，选择你的编译器并手动配置ABI</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405002750031-1712249643489-3.png" alt="image-20240405002750031"></p><p>至此，Qt 的配置完毕，现在可以用 Qt Creator 敲代码了。Qt Creator作为 Qt 官方 IDE ，它能为我们提供良好的项目构建、调试、测试、发布功能。</p><p>但是，作为一个忠实的 VSCode 用户，秉持着使用 VSCod 搭建全部开发环境的理念，以及拒绝除了 VSCode 以外的笨重丑陋 IDE 的精神(大雾)，也为正式开发的前后端单仓库提供支持，我还是选择使用 VSCode 作为 Qt 开发的主战场。</p><h1 id="2-、VSCode-Qt-环境搭建"><a href="#2-、VSCode-Qt-环境搭建" class="headerlink" title="2 、VSCode Qt 环境搭建"></a>2 、VSCode Qt 环境搭建</h1><p>需要在vsc中安装如下插件：C&#x2F;C++、CMake、CMake Tools、Qt Configure、Qt Tools</p><p>各个插件作用如下：</p><ul><li>C&#x2F;C++ : 为c++开发提供IntelliSense 支持、代码补全、高亮显示等基础功能</li><li>CMake : 为CMakeLists.txt文件提供代码补全、高亮等支持</li><li>CMake Tools : 为CMake提供命令封装，在下方状态栏显示生成、调试、运行等按钮，以及在侧边栏显示CMake相关支持</li><li>Qt Configure : 为VSCode提供Qt项目构建支持，并生成launch.json以便于调试</li><li>Qt Tools : 可以便捷地在 VSCode 中打开 Qt Designer 和 Qt Creator（其实我基本用不到）</li></ul><p>插件安装完毕后，开始配置开发环境。</p><p>首先在 Qt Configure 的设置中配置Qt的安装目录以及套件目录</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405004028189.png" alt="image-20240405004028189"></p><p>Ctrl+Shift+P 打开命令窗口，输入命令并根据提示填写项目信息</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405005244588-1712249680161-18.png" alt="image-20240405005244588"></p><p>我们发现 Qt Configure 插件根据我们填写的信息为我们配置了CMake 清单以及 launch.json（显示在运行与测试栏中）</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405005615486.png" alt="image-20240405005615486"></p><p>然后 Ctrl+Shift+P 打开命令窗口，输入命令配置c++环境</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405005822531.png" alt="image-20240405005822531"></p><p>主要改动 include 路径，这将影响 IntelliSence 能否识别到 Qt 库的头文件</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405005915556.png" alt="image-20240405005915556"></p><p>最后再 setting.json 配置 CMake 的生成器，以及运行时的环境变量，让运行时的程序能够加载Qt的库文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/setting.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cmake.generator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Visual Studio 17 2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmake.environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;PATH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Qt/Qt5.12.12/5.12.12/msvc2017_64/bin&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后，点击下方状态栏的运行，就可以愉快地运行我们的程序拉！</p><p>不过我们发现构建出来的 .exe 文件在一堆杂乱的文件中，这些是构建过程中产生的中间文件，所以还需要配置打包命令来将构建完成的文件放入 dist 文件夹中，这就留给后面正式配置开发环境的时候再来吧（&#x3D; - &#x3D;）</p><h1 id="3-、Vue3-Qt-混合开发环境搭建"><a href="#3-、Vue3-Qt-混合开发环境搭建" class="headerlink" title="3 、Vue3 + Qt 混合开发环境搭建"></a>3 、Vue3 + Qt 混合开发环境搭建</h1><p>[2024&#x2F;4&#x2F;5] 继续敲，敲完出去玩 o(<em>￣▽￣</em>)ブ</p><p>采用单仓库形式，前端文件放在 &#x2F;front，后端文件放在&#x2F;，调试文件放在 &#x2F;build，发布文件放在 &#x2F;dist</p><h2 id="3-1-基础环境搭建"><a href="#3-1-基础环境搭建" class="headerlink" title="3.1 基础环境搭建"></a>3.1 基础环境搭建</h2><p>按之前的方法在根目录下配置qt开发环境</p><p>然后使用 npm 搭建 vue3 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><h2 id="3-2-配置命令"><a href="#3-2-配置命令" class="headerlink" title="3.2 配置命令"></a>3.2 配置命令</h2><p>基础环境搭建完毕后，需要封装一些指令以便后期的开发、调试、打包</p><h3 id="3-2-1-前端命令封装"><a href="#3-2-1-前端命令封装" class="headerlink" title="3.2.1 前端命令封装"></a>3.2.1 前端命令封装</h3><p>由于需要将 &#x2F;front&#x2F;dist 下的文件存入 resource.qrc 以供 Qt 使用，所以编写了脚本来实现这个功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, tostring</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_qrc</span>(<span class="params">file_path: <span class="built_in">str</span>, folder_path: <span class="built_in">str</span>, prefix: <span class="built_in">str</span> = <span class="string">&quot;/&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成包含指定文件夹内所有文件的 .qrc 文件。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    file_path (str): 输出的 .qrc 文件路径。</span></span><br><span class="line"><span class="string">    folder_path (str): 需要包含为资源的文件夹路径。</span></span><br><span class="line"><span class="string">    prefix (str, optional): 资源前缀，默认为 &quot;/&quot;。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">folder_path = os.path.abspath(folder_path)</span><br><span class="line">    root = Element(<span class="string">&quot;RCC&quot;</span>)</span><br><span class="line">    qresource = SubElement(root, <span class="string">&quot;qresource&quot;</span>, &#123;<span class="string">&quot;prefix&quot;</span>: prefix&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">        rel_dirpath = os.path.relpath(dirpath, folder_path)</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            rel_filepath = os.path.join(rel_dirpath, filename).replace(os.sep, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">            rel_filepath = rel_filepath[<span class="number">1</span>:] <span class="keyword">if</span> rel_filepath.startswith(<span class="string">&quot;.&quot;</span>) <span class="keyword">else</span> rel_filepath</span><br><span class="line">            file_element = SubElement(qresource, <span class="string">&quot;file&quot;</span>, &#123;<span class="string">&quot;alias&quot;</span>: rel_filepath&#125;)</span><br><span class="line">            full_path = os.path.join(folder_path, filename)</span><br><span class="line">            file_element.text = <span class="string">f&quot;<span class="subst">&#123;full_path&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(tostring(root, encoding=<span class="string">&quot;unicode&quot;</span>))</span><br><span class="line"></span><br><span class="line">generate_qrc(<span class="string">&quot;./src/resource.qrc&quot;</span>, <span class="string">&quot;./front/dist&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后配置 tasks.json </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build qrc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python qrc.py&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;statusbar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后在 &#x2F;.vscode&#x2F;tasks.json 下配置前端命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dev&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;front&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$(bug) debug front&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;build qrc&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;front&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$(package) build front&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc &amp;&amp; vite build&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>配合 Tasks 插件，可以将 tasks 显示在下方状态栏</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240405162329970.png" alt="image-20240405162329970"></p><h3 id="3-2-2-后端命令封装"><a href="#3-2-2-后端命令封装" class="headerlink" title="3.2.2 后端命令封装"></a>3.2.2 后端命令封装</h3><p>在 CMakeList.txt 中引入 qrc 文件，并配置头文件引入路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    WIN32 <span class="comment"># If you need a terminal for debug, please comment this statement </span></span><br><span class="line">    <span class="variable">$&#123;srcs&#125;</span> </span><br><span class="line">    ./src/resource.qrc</span><br><span class="line">) </span><br><span class="line"><span class="keyword">target_include_directories</span>(common PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src)</span><br></pre></td></tr></table></figure><p>在 CMakeLists.txt 下配置安装路径，这将会让目标文件生成在 &#x2F;dist 中</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span> DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/dist)</span><br></pre></td></tr></table></figure><p>由于 CMake 构建出来的文件不带 Qt 依赖，需要使用 windeployqt.exe 来补全依赖，故编写一个 .bat 脚本来对 &#x2F;dist 中的每一个 .exe 文件执行依赖补全，其中 %1 变量由 VSCode 调用 Qt Configure 的路径来传递</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:: windeployqt.bat</span><br><span class="line">for %%i in (*.exe) do (%1 %%i) </span><br></pre></td></tr></table></figure><p>然后在 tasks.json 中配置打包命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake-install&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;--build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;--target&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;install&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;statusbar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$(package) release&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;cmake-install&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/windeployqt.bat&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;&#x27;$&#123;config:qtConfigure.qtKitDir&#125;/bin/windeployqt.exe&#x27;&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>成果如下：</p><p><img src="https://raw.githubusercontent.com/CodeHarmony-Dev/picbed/main/img/image-20240407221309801.png" alt="image-20240407221309801"></p><p>配置 CMake 的参数，给 DEV_CODE 设定值，以便区分模式</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span>)</span><br><span class="line"><span class="comment"># set(CMAKE_BUILD_TYPE &quot;Release&quot;)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$&#123;CMAKE_BUILD_TYPE&#125;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;Debug&quot;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(DDEV_CODE=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> ()</span><br><span class="line"><span class="keyword">add_definitions</span>(DDEV_CODE=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;release&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span> ()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0、项目背景介绍&quot;&gt;&lt;a href=&quot;#0、项目背景介绍&quot; class=&quot;headerlink&quot; title=&quot;0、项目背景介绍&quot;&gt;&lt;/a&gt;0、项目背景介绍&lt;/h1&gt;&lt;p&gt;学校的 c++ 课程要求在期末前完成一个大作业，需求大致是以综艺节目《最强大脑》第11季第三</summary>
      
    
    
    
    
    <category term="Dev-Journal" scheme="http://example.com/tags/Dev-Journal/"/>
    
  </entry>
  
</feed>
